openapi: 3.0.0
info:
  contact:
    email: mateusz.teplicki@gmail.com
  description: |
    Plik openapi definiujący RESTowe zapytania aplikacji do szybkiego tworzenia portfolio dla fotografów
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Foto Portfolio Project
  version: 1.1.0
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/MATEUSZTEPLICKI/foto_portfolio_project/1.1.0
- url: https://127.0.0.1:8080
tags:
- description: creates/returns/updates contents of pages
  name: page
- description: creates/returns/updates/deletes contents of subpages
  name: subpage
- description: actions dealing with layouts
  name: layout
- description: actions dealing with social medias
  name: social
- description: creates/returns/updates/deletes contents of sections
  name: section
- description: creates/returns/deletes images
  name: image
- description: mechanizm autentyfikacji (zwracanie tokenu JWT)
  name: session
paths:
  /image:
    get:
      description: returns array of images with specified position
      operationId: get_image_array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                type: array
          description: succesful operation
        "403":
          description: unauthorized operation
        "404":
          description: invalid ID
      security:
      - bearerAuth:
        - security
      summary: get array of images
      tags:
      - image
      x-openapi-router-controller: openapi_server.controllers.image_controller
    post:
      description: "user sends image in binary, which is stored in database. Returns\
        \ Image object with address and metadata (Photo object)"
      operationId: post_image
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/image_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: Succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: uploads an image
      tags:
      - image
      x-openapi-router-controller: openapi_server.controllers.image_controller
  /image/{id}:
    delete:
      description: admin send request to server with intentions of deleting image
        with specific id
      operationId: delete_image
      parameters:
      - description: id of deleted image
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: succesful operation
        "404":
          description: invalid ID
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: deletes image with specific id
      tags:
      - image
      x-openapi-router-controller: openapi_server.controllers.image_controller
    get:
      description: returns image requested by admin/user
      operationId: get_image
      parameters:
      - description: id of requested image
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: succesful operation
        "403":
          description: unauthorized operation
        "404":
          description: invalid ID
      security:
      - bearerAuth:
        - security
      summary: returns specific image
      tags:
      - image
      x-openapi-router-controller: openapi_server.controllers.image_controller
    patch:
      operationId: patch_image
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/image_id_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: succesful operation - returns a modified Image
      security:
      - bearerAuth:
        - security
      summary: modify metadata of image (alt and title)
      tags:
      - image
      x-openapi-router-controller: openapi_server.controllers.image_controller
  /layout:
    get:
      operationId: get_layout
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Layout'
                type: array
          description: succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: returns a layout assigned to a page
      tags:
      - layout
      x-openapi-router-controller: openapi_server.controllers.layout_controller
    patch:
      operationId: patch_layout
      requestBody:
        $ref: '#/components/requestBodies/MetaLayout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
          description: succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: updates a layout
      tags:
      - layout
      x-openapi-router-controller: openapi_server.controllers.layout_controller
    put:
      description: creates a new layout based on alias and value (old layout is deleted)
      operationId: put_layout
      requestBody:
        $ref: '#/components/requestBodies/MetaLayout'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
          description: succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: creates a new layout
      tags:
      - layout
      x-openapi-router-controller: openapi_server.controllers.layout_controller
  /layout/template:
    get:
      description: admin can choose the best layout for page from the existing ones
      operationId: get_template_array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Layout'
                type: array
          description: succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: return array of template layouts
      tags:
      - layout
      x-openapi-router-controller: openapi_server.controllers.layout_controller
    put:
      description: "creates new layout based on template layout, and assign it to\
        \ a page (old template is removed)"
      operationId: put_template_based_layout
      parameters:
      - description: ID of template layout
        explode: true
        in: query
        name: id
        required: true
        schema:
          type: integer
        style: form
      - description: alias of a layout
        explode: true
        in: query
        name: alias
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
          description: succesful operation
        "404":
          description: wrong id
        "403":
          description: unauthorised operation - not a template
      security:
      - bearerAuth:
        - security
      summary: creates new layout based on template layout
      tags:
      - layout
      x-openapi-router-controller: openapi_server.controllers.layout_controller
  /page:
    post:
      description: creates a blank project with one blank subpage - requires creating
        new account (user must provide login and password)
      operationId: create_page
      parameters:
      - explode: false
        in: header
        name: Login
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Pasword
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: succesful operation - returns blank project
        "400":
          description: page (Login) already exists
      summary: creates a new page
      tags:
      - page
      x-openapi-router-controller: openapi_server.controllers.page_controller
  /page/meta:
    patch:
      operationId: patch_meta_page
      requestBody:
        $ref: '#/components/requestBodies/MetaPage'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaPage'
          description: succesful operation - returns metapage
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: modifies a metadata of a page
      tags:
      - page
      x-openapi-router-controller: openapi_server.controllers.page_controller
  /page/{id}:
    get:
      description: returns page that user/admin sent request for
      operationId: get_page
      parameters:
      - description: id of page
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
          description: succesful operation
        "404":
          description: Page not found
      summary: returns the requested page
      tags:
      - page
      x-openapi-router-controller: openapi_server.controllers.page_controller
  /session:
    get:
      description: "if login and password are correct, returns a JWT token to authorize\
        \ REST api"
      operationId: get_session
      parameters:
      - explode: false
        in: header
        name: Login
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: Pasword
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: "succesful operation -  returns JWT token with id of page as\
            \ payload (więc nie ma potrzeby przesyłania go poprzez restowe zapytania,\
            \ gdyż w tym tokenie bedzie informacja, na jakiej stronie działamy)"
        "404":
          description: wrong login or password
      summary: login to admin panel
      tags:
      - session
      x-openapi-router-controller: openapi_server.controllers.session_controller
  /social:
    get:
      operationId: get_socials
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Social'
                type: array
          description: succesful operation
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: returns a array of social bindings
      tags:
      - social
      x-openapi-router-controller: openapi_server.controllers.social_controller
    post:
      operationId: create_connection
      parameters:
      - description: alias of a connection
        explode: true
        in: query
        name: alias
        required: true
        schema:
          type: string
        style: form
      - description: value of a connection
        explode: false
        in: header
        name: value
        required: true
        schema:
          additionalProperties: true
          type: object
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Social'
          description: succesful operation
        "400":
          description: wrong value of connection
        "403":
          description: authorization error - social binding does not belong to page
        "500":
          description: server error
      security:
      - bearerAuth:
        - security
      summary: creates a new social media connection
      tags:
      - social
      x-openapi-router-controller: openapi_server.controllers.social_controller
  /social/{id}:
    delete:
      operationId: delete_social_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - social binding does not belong to page
      security:
      - bearerAuth:
        - security
      summary: deletes a social by ID
      tags:
      - social
      x-openapi-router-controller: openapi_server.controllers.social_controller
    get:
      operationId: get_social_by_id
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Social'
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - social binding does not belong to page
      security:
      - bearerAuth:
        - security
      summary: finds a social by ID
      tags:
      - social
      x-openapi-router-controller: openapi_server.controllers.social_controller
  /subpage:
    get:
      operationId: get_subpage_array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subpage'
                type: array
          description: succesfuly created - returns an array
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: returns array of subpages
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
    patch:
      operationId: patch_subpage_order
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subpage'
                type: array
          description: succesful operation
        "400":
          description: provided list of IDs does not contains all of subpages in page
        "404":
          description: at least one ID is wrong
        "403":
          description: unauthorised operation - at least one subpage belongs to another
            page
      security:
      - bearerAuth:
        - security
      summary: modifies the order of subpages in array
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
    post:
      description: creates a new subpage based on MetaPage
      operationId: create_subpage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subpage_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subpage'
          description: succesfuly created - returns a subpage
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: creates a new subpage
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
  /subpage/{id_subpage}/section:
    get:
      operationId: get_sections
      parameters:
      - explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Section'
                type: array
          description: succesful operation
        "404":
          description: wrong ID of subpage
        "403":
          description: authorization error - subpage does not belong to page
      security:
      - bearerAuth:
        - security
      summary: returns a array of sections of subpage
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
    patch:
      operationId: patch_section_order
      parameters:
      - description: path of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Section'
                type: array
          description: succesful operation
        "404":
          description: at least one ID is wrong
        "403":
          description: "unauthorised operation - at least one subpage belongs to another\
            \ page, or at least one section belongs to another subpage"
      security:
      - bearerAuth:
        - security
      summary: modifies the order of sections in subpage
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
    post:
      operationId: create_section
      parameters:
      - description: path of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/id_subpage_section_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: succesful operation
        "400":
          description: wrong value of section
        "403":
          description: authorization error - subpage does not belong to page
      security:
      - bearerAuth:
        - security
      summary: creates a new section on a subpage
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
  /subpage/{id_subpage}/section/{id_section}:
    delete:
      operationId: delete_section_by_id
      parameters:
      - description: path of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: path of a subpage
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - social binding does not belong to page
      security:
      - bearerAuth:
        - security
      summary: deletes a section by ID
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
    get:
      operationId: get_section_by_id
      parameters:
      - description: path of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: path of a subpage
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - subpage does not belong to page or section
            does not belong to subpage
      security:
      - bearerAuth:
        - security
      summary: finds a section by ID
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
  /subpage/{id_subpage}/section/{id_section}/images:
    patch:
      operationId: patch_image_order
      parameters:
      - description: id of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of section
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                type: array
          description: succesful operation
        "400":
          description: this section does not allow adding images
        "404":
          description: wrong ID
        "403":
          description: authorization error - subpage does not belong to page or section
            does not belong to subpage
      security:
      - bearerAuth:
        - security
      summary: modifies the order of photos in section or add all photos from ID array
        to this section
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
    post:
      operationId: post_image_to_section
      parameters:
      - description: id of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of section
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of image
        explode: true
        in: query
        name: value
        required: true
        schema:
          example: 7
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                type: array
          description: succesful operation
        "400":
          description: this section does not allow adding images
        "404":
          description: wrong ID
        "403":
          description: authorization error - subpage does not belong to page or section
            does not belong to subpage
      security:
      - bearerAuth:
        - security
      summary: add one image to a section
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
  /subpage/{id_subpage}/section/{id_section}/images/{id_image}:
    delete:
      operationId: delete_image_from_section
      parameters:
      - description: id of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of section
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of image
        explode: false
        in: path
        name: id_image
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Image'
                type: array
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - subpage does not belong to page or section
            does not belong to subpage
      security:
      - bearerAuth:
        - security
      summary: deletes an image from section
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
  /subpage/{id_subpage}/section/{id_section}/value:
    patch:
      description: "modifies a value of section - new value object does not replace\
        \ old, but method combines both of them (@see patch method)"
      operationId: patch_section_value
      parameters:
      - description: id of a subpage
        explode: false
        in: path
        name: id_subpage
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      - description: id of section
        explode: false
        in: path
        name: id_section
        required: true
        schema:
          example: 5
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties: true
              type: object
        description: value of section
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: succesful operation
        "404":
          description: wrong ID
        "403":
          description: authorization error - subpage does not belong to page or section
            does not belong to subpage
      security:
      - bearerAuth:
        - security
      summary: modifies a value of section
      tags:
      - section
      x-openapi-router-controller: openapi_server.controllers.section_controller
  /subpage/{id}:
    delete:
      operationId: delete_subpage
      parameters:
      - description: id of subpage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: succesful operation
        "404":
          description: invalid id
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: deletes a subpage
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
    get:
      description: returns a subpage based on ID
      operationId: get_subpage
      parameters:
      - description: id of subpage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subpage'
          description: succesful operation - returns a subpage
        "404":
          description: invalid id
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: find subpage by ID
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
    patch:
      operationId: patch_subpage
      parameters:
      - description: id of subpage
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subpage_id_body'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subpage'
          description: succesful operation - returns a subpage
        "404":
          description: invalid id
        "403":
          description: unauthorized operation
      security:
      - bearerAuth:
        - security
      summary: updates a subpage
      tags:
      - subpage
      x-openapi-router-controller: openapi_server.controllers.subpage_controller
components:
  requestBodies:
    Photo:
      content:
        multipart/form-data:
          schema:
            properties:
              file:
                format: binary
                type: string
              alt:
                type: string
              title:
                type: string
            required:
            - file
            type: object
    MetaPage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetaPage'
      description: Meta information of page
      required: true
    MetaSubpage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetaSubpage'
      description: Meta information of subpage
      required: true
    Order:
      content:
        application/json:
          example:
          - 2
          - 1
          - 4
          - 3
          schema:
            items:
              type: integer
            type: array
      description: Order of elements in container
      required: true
    MetaLayout:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MetaLayout'
  schemas:
    Section:
      example:
        subpage: 5
        images:
        - id: 1
          page: 2
          image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
          alt: Alternative text
          title: Title of image
        - id: 2
          page: 2
          image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
          alt: Title of image
          title: Title of image
        alias: gallery_section
        id: 1
        value:
          key: ""
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        subpage:
          example: 5
          format: int64
          title: subpage
          type: integer
        alias:
          example: gallery_section
          title: alias
          type: string
        images:
          example:
          - id: 1
            page: 2
            image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
            alt: Alternative text
            title: Title of image
          - id: 2
            page: 2
            image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
            alt: Title of image
            title: Title of image
          items:
            $ref: '#/components/schemas/Image'
          title: images
          type: array
        value:
          additionalProperties: true
          title: value
          type: object
      required:
      - alias
      - id
      - subpage
      - value
      title: Section
      type: object
    Subpage:
      example:
        meta:
          path: /about
          name: About
          description: About description
          title: About
        id: 1
        page: 10
        value:
          key: ""
        sections:
        - subpage: 5
          images:
          - id: 1
            page: 2
            image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
            alt: Alternative text
            title: Title of image
          - id: 2
            page: 2
            image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
            alt: Title of image
            title: Title of image
          alias: gallery_section
          id: 1
          value:
            key: ""
        - subpage: 5
          images:
          - id: 1
            page: 2
            image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
            alt: Alternative text
            title: Title of image
          - id: 2
            page: 2
            image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
            alt: Title of image
            title: Title of image
          alias: gallery_section
          id: 1
          value:
            key: ""
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        page:
          example: 10
          format: int64
          title: page
          type: integer
        meta:
          $ref: '#/components/schemas/MetaSubpage'
        sections:
          items:
            $ref: '#/components/schemas/Section'
          title: sections
          type: array
        value:
          additionalProperties: true
          title: value
          type: object
      required:
      - id
      - meta
      - page
      - sections
      - value
      title: Subpage
      type: object
    MetaSubpage:
      additionalProperties: true
      example:
        path: /about
        name: About
        description: About description
        title: About
      properties:
        name:
          example: About
          type: string
        path:
          example: /about
          type: string
        title:
          example: About
          type: string
        description:
          example: About description
          type: string
      title: MetaSubpage
      type: object
    Social:
      example:
        alias: Google Photos
        id: 1
        page: 10
        value:
          key: ""
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        page:
          example: 10
          format: int64
          title: page
          type: integer
        alias:
          example: Google Photos
          title: alias
          type: string
        value:
          additionalProperties: true
          title: value
          type: object
      required:
      - alias
      - id
      - page
      - value
      title: Social
      type: object
    Page:
      example:
        layout: null
        meta:
          languages:
          - PL
          - EN
          - FR
          author: Jan Kowalski
          domain: jankowalski.myportfolio.com
          name: Jan Kowalski fotografia
          logo:
            image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
            alt: Alternative text
            id: 1
            page: 2
            title: Title of image
        subpages:
        - meta:
            path: /about
            name: About
            description: About description
            title: About
          id: 1
          page: 10
          value:
            key: ""
          sections:
          - subpage: 5
            images:
            - id: 1
              page: 2
              image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
              alt: Alternative text
              title: Title of image
            - id: 2
              page: 2
              image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
              alt: Title of image
              title: Title of image
            alias: gallery_section
            id: 1
            value:
              key: ""
          - subpage: 5
            images:
            - id: 1
              page: 2
              image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
              alt: Alternative text
              title: Title of image
            - id: 2
              page: 2
              image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
              alt: Title of image
              title: Title of image
            alias: gallery_section
            id: 1
            value:
              key: ""
        - meta:
            path: /about
            name: About
            description: About description
            title: About
          id: 1
          page: 10
          value:
            key: ""
          sections:
          - subpage: 5
            images:
            - id: 1
              page: 2
              image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
              alt: Alternative text
              title: Title of image
            - id: 2
              page: 2
              image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
              alt: Title of image
              title: Title of image
            alias: gallery_section
            id: 1
            value:
              key: ""
          - subpage: 5
            images:
            - id: 1
              page: 2
              image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
              alt: Alternative text
              title: Title of image
            - id: 2
              page: 2
              image: https://i.ibb.co/VDnKX0R/Group-3-min.jpg
              alt: Title of image
              title: Title of image
            alias: gallery_section
            id: 1
            value:
              key: ""
        id: 1
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        meta:
          $ref: '#/components/schemas/MetaPage'
        layout:
          $ref: '#/components/schemas/Layout'
        subpages:
          items:
            $ref: '#/components/schemas/Subpage'
          title: subpages
          type: array
      required:
      - id
      - layout
      - meta
      - subpages
      title: Page
      type: object
    MetaPage:
      additionalProperties: true
      example:
        languages:
        - PL
        - EN
        - FR
        author: Jan Kowalski
        domain: jankowalski.myportfolio.com
        name: Jan Kowalski fotografia
        logo:
          image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
          alt: Alternative text
          id: 1
          page: 2
          title: Title of image
      properties:
        domain:
          example: jankowalski.myportfolio.com
          type: string
        name:
          example: Jan Kowalski fotografia
          type: string
        author:
          example: Jan Kowalski
          type: string
        logo:
          $ref: '#/components/schemas/Image'
        languages:
          example:
          - PL
          - EN
          - FR
          items:
            type: string
          type: array
      title: MetaPage
      type: object
    MetaLayout:
      example:
        alias: alias
        value:
          background_color: background_color
          author: author
          nav_bar: left
          font: font
      properties:
        alias:
          title: alias
          type: string
        value:
          $ref: '#/components/schemas/MetaLayout_value'
      required:
      - alias
      - value
      title: MetaLayout
      type: object
    Layout:
      allOf:
      - $ref: '#/components/schemas/MetaLayout'
      - $ref: '#/components/schemas/Layout_allOf'
      title: Layout
    Image:
      example:
        image: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
        alt: Alternative text
        id: 1
        page: 2
        title: Title of image
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        page:
          example: 2
          format: int64
          title: page
          type: integer
        image:
          example: https://i.ibb.co/R3JhM0J/Group-1-min.jpg
          title: image
          type: string
        alt:
          example: Alternative text
          title: alt
          type: string
        title:
          example: Title of image
          title: title
          type: string
      required:
      - alt
      - id
      - image
      - page
      - title
      title: Image
    subpage_body:
      properties:
        value:
          additionalProperties: true
          description: additional properties of subpage
          title: value
          type: object
        meta:
          $ref: '#/components/schemas/MetaSubpage'
      required:
      - meta
      - value
      title: subpage_body
      type: object
    subpage_id_body:
      properties:
        value:
          additionalProperties: true
          description: addtional value of subpage
          title: value
          type: object
        meta:
          $ref: '#/components/schemas/MetaSubpage'
      required:
      - meta
      - value
      title: subpage_id_body
      type: object
    id_subpage_section_body:
      properties:
        alias:
          description: alias of a section
          example: gallery-section
          title: alias
          type: string
        value:
          additionalProperties: true
          description: value of a section
          title: value
          type: object
      required:
      - alias
      - value
      title: id_subpage_section_body
      type: object
    image_id_body:
      properties:
        alt:
          title: alt
          type: string
        title:
          title: title
          type: string
      title: image_id_body
      type: object
    image_body:
      properties:
        file:
          format: binary
          type: string
        alt:
          type: string
        title:
          type: string
      required:
      - file
      type: object
    MetaLayout_value:
      additionalProperties: true
      example:
        background_color: background_color
        author: author
        nav_bar: left
        font: font
      properties:
        author:
          type: string
        font:
          type: string
        nav_bar:
          enum:
          - left
          - top
          - right
          type: string
        background_color:
          type: string
      title: MetaLayout_value
      type: object
    Layout_allOf:
      properties:
        id:
          example: 1
          format: int64
          title: id
          type: integer
        is_template:
          example: false
          title: is_template
          type: boolean
      required:
      - id
      - is_template
      title: Layout_allOf
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: "payload zawiera pole \"id\", które determinuje, która strona jest\
        \ modyfikowana przy zapytaniach RESTowych"
      scheme: bearer
      type: http
      x-bearerInfoFunc: app.decode_token
