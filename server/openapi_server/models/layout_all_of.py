# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LayoutAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, is_template=None):  # noqa: E501
        """LayoutAllOf - a model defined in OpenAPI

        :param id: The id of this LayoutAllOf.  # noqa: E501
        :type id: int
        :param is_template: The is_template of this LayoutAllOf.  # noqa: E501
        :type is_template: bool
        """
        self.openapi_types = {
            'id': int,
            'is_template': bool
        }

        self.attribute_map = {
            'id': 'id',
            'is_template': 'is_template'
        }

        self._id = id
        self._is_template = is_template

    @classmethod
    def from_dict(cls, dikt) -> 'LayoutAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Layout_allOf of this LayoutAllOf.  # noqa: E501
        :rtype: LayoutAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LayoutAllOf.


        :return: The id of this LayoutAllOf.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LayoutAllOf.


        :param id: The id of this LayoutAllOf.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_template(self):
        """Gets the is_template of this LayoutAllOf.


        :return: The is_template of this LayoutAllOf.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this LayoutAllOf.


        :param is_template: The is_template of this LayoutAllOf.
        :type is_template: bool
        """
        if is_template is None:
            raise ValueError("Invalid value for `is_template`, must not be `None`")  # noqa: E501

        self._is_template = is_template
