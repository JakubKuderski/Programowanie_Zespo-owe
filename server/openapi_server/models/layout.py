# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.meta_layout_value import MetaLayoutValue
from openapi_server import util

from openapi_server.models.meta_layout_value import MetaLayoutValue  # noqa: E501

class Layout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias=None, value=None, id=None, is_template=None):  # noqa: E501
        """Layout - a model defined in OpenAPI

        :param alias: The alias of this Layout.  # noqa: E501
        :type alias: str
        :param value: The value of this Layout.  # noqa: E501
        :type value: MetaLayoutValue
        :param id: The id of this Layout.  # noqa: E501
        :type id: int
        :param is_template: The is_template of this Layout.  # noqa: E501
        :type is_template: bool
        """
        self.openapi_types = {
            'alias': str,
            'value': MetaLayoutValue,
            'id': int,
            'is_template': bool
        }

        self.attribute_map = {
            'alias': 'alias',
            'value': 'value',
            'id': 'id',
            'is_template': 'is_template'
        }

        self._alias = alias
        self._value = value
        self._id = id
        self._is_template = is_template

    @classmethod
    def from_dict(cls, dikt) -> 'Layout':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Layout of this Layout.  # noqa: E501
        :rtype: Layout
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Layout.


        :return: The alias of this Layout.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Layout.


        :param alias: The alias of this Layout.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def value(self):
        """Gets the value of this Layout.


        :return: The value of this Layout.
        :rtype: MetaLayoutValue
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Layout.


        :param value: The value of this Layout.
        :type value: MetaLayoutValue
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def id(self):
        """Gets the id of this Layout.


        :return: The id of this Layout.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layout.


        :param id: The id of this Layout.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_template(self):
        """Gets the is_template of this Layout.


        :return: The is_template of this Layout.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this Layout.


        :param is_template: The is_template of this Layout.
        :type is_template: bool
        """
        if is_template is None:
            raise ValueError("Invalid value for `is_template`, must not be `None`")  # noqa: E501

        self._is_template = is_template
