# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.image import Image
from openapi_server import util

from openapi_server.models.image import Image  # noqa: E501

class Section(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, subpage=None, alias=None, images=None, value=None):  # noqa: E501
        """Section - a model defined in OpenAPI

        :param id: The id of this Section.  # noqa: E501
        :type id: int
        :param subpage: The subpage of this Section.  # noqa: E501
        :type subpage: int
        :param alias: The alias of this Section.  # noqa: E501
        :type alias: str
        :param images: The images of this Section.  # noqa: E501
        :type images: List[Image]
        :param value: The value of this Section.  # noqa: E501
        :type value: Dict[str, object]
        """
        self.openapi_types = {
            'id': int,
            'subpage': int,
            'alias': str,
            'images': List[Image],
            'value': Dict[str, object]
        }

        self.attribute_map = {
            'id': 'id',
            'subpage': 'subpage',
            'alias': 'alias',
            'images': 'images',
            'value': 'value'
        }

        self._id = id
        self._subpage = subpage
        self._alias = alias
        self._images = images
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Section':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Section of this Section.  # noqa: E501
        :rtype: Section
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Section.


        :return: The id of this Section.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Section.


        :param id: The id of this Section.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def subpage(self):
        """Gets the subpage of this Section.


        :return: The subpage of this Section.
        :rtype: int
        """
        return self._subpage

    @subpage.setter
    def subpage(self, subpage):
        """Sets the subpage of this Section.


        :param subpage: The subpage of this Section.
        :type subpage: int
        """
        if subpage is None:
            raise ValueError("Invalid value for `subpage`, must not be `None`")  # noqa: E501

        self._subpage = subpage

    @property
    def alias(self):
        """Gets the alias of this Section.


        :return: The alias of this Section.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Section.


        :param alias: The alias of this Section.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")  # noqa: E501

        self._alias = alias

    @property
    def images(self):
        """Gets the images of this Section.


        :return: The images of this Section.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Section.


        :param images: The images of this Section.
        :type images: List[Image]
        """

        self._images = images

    @property
    def value(self):
        """Gets the value of this Section.


        :return: The value of this Section.
        :rtype: Dict[str, object]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Section.


        :param value: The value of this Section.
        :type value: Dict[str, object]
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
