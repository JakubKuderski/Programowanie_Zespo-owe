# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from photo_portfolio.models.base_model_ import Model
from photo_portfolio.models.layout import Layout  # noqa: F401,E501
from photo_portfolio.models.meta_page import MetaPage  # noqa: F401,E501
from photo_portfolio.models.subpage import Subpage  # noqa: F401,E501
from photo_portfolio import util


class Page(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, meta: MetaPage=None, layout: Layout=None, subpages: List[Subpage]=None):  # noqa: E501
        """Page - a model defined in Swagger

        :param id: The id of this Page.  # noqa: E501
        :type id: int
        :param meta: The meta of this Page.  # noqa: E501
        :type meta: MetaPage
        :param layout: The layout of this Page.  # noqa: E501
        :type layout: Layout
        :param subpages: The subpages of this Page.  # noqa: E501
        :type subpages: List[Subpage]
        """
        self.swagger_types = {
            'id': int,
            'meta': MetaPage,
            'layout': Layout,
            'subpages': List[Subpage]
        }

        self.attribute_map = {
            'id': 'id',
            'meta': 'meta',
            'layout': 'layout',
            'subpages': 'subpages'
        }
        self._id = id
        self._meta = meta
        self._layout = layout
        self._subpages = subpages

    @classmethod
    def from_dict(cls, dikt) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Page of this Page.  # noqa: E501
        :rtype: Page
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Page.


        :return: The id of this Page.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Page.


        :param id: The id of this Page.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def meta(self) -> MetaPage:
        """Gets the meta of this Page.


        :return: The meta of this Page.
        :rtype: MetaPage
        """
        return self._meta

    @meta.setter
    def meta(self, meta: MetaPage):
        """Sets the meta of this Page.


        :param meta: The meta of this Page.
        :type meta: MetaPage
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def layout(self) -> Layout:
        """Gets the layout of this Page.


        :return: The layout of this Page.
        :rtype: Layout
        """
        return self._layout

    @layout.setter
    def layout(self, layout: Layout):
        """Sets the layout of this Page.


        :param layout: The layout of this Page.
        :type layout: Layout
        """
        if layout is None:
            raise ValueError("Invalid value for `layout`, must not be `None`")  # noqa: E501

        self._layout = layout

    @property
    def subpages(self) -> List[Subpage]:
        """Gets the subpages of this Page.


        :return: The subpages of this Page.
        :rtype: List[Subpage]
        """
        return self._subpages

    @subpages.setter
    def subpages(self, subpages: List[Subpage]):
        """Sets the subpages of this Page.


        :param subpages: The subpages of this Page.
        :type subpages: List[Subpage]
        """
        if subpages is None:
            raise ValueError("Invalid value for `subpages`, must not be `None`")  # noqa: E501

        self._subpages = subpages
