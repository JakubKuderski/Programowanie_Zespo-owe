# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from photo_portfolio.models.base_model_ import Model
from photo_portfolio import util


class Image(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, page: int=None, image: str=None, alt: str=None, title: str=None):  # noqa: E501
        """Image - a model defined in Swagger

        :param id: The id of this Image.  # noqa: E501
        :type id: int
        :param page: The page of this Image.  # noqa: E501
        :type page: int
        :param image: The image of this Image.  # noqa: E501
        :type image: str
        :param alt: The alt of this Image.  # noqa: E501
        :type alt: str
        :param title: The title of this Image.  # noqa: E501
        :type title: str
        """
        self.swagger_types = {
            'id': int,
            'page': int,
            'image': str,
            'alt': str,
            'title': str
        }

        self.attribute_map = {
            'id': 'id',
            'page': 'page',
            'image': 'image',
            'alt': 'alt',
            'title': 'title'
        }
        self._id = id
        self._page = page
        self._image = image
        self._alt = alt
        self._title = title

    @classmethod
    def from_dict(cls, dikt) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Image of this Image.  # noqa: E501
        :rtype: Image
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Image.


        :return: The id of this Image.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Image.


        :param id: The id of this Image.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def page(self) -> int:
        """Gets the page of this Image.


        :return: The page of this Image.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this Image.


        :param page: The page of this Image.
        :type page: int
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def image(self) -> str:
        """Gets the image of this Image.


        :return: The image of this Image.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Image.


        :param image: The image of this Image.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def alt(self) -> str:
        """Gets the alt of this Image.


        :return: The alt of this Image.
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt: str):
        """Sets the alt of this Image.


        :param alt: The alt of this Image.
        :type alt: str
        """
        if alt is None:
            raise ValueError("Invalid value for `alt`, must not be `None`")  # noqa: E501

        self._alt = alt

    @property
    def title(self) -> str:
        """Gets the title of this Image.


        :return: The title of this Image.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Image.


        :param title: The title of this Image.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title
