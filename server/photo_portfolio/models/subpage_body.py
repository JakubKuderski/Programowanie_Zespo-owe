# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from photo_portfolio.models.base_model_ import Model
from photo_portfolio.models.componentsrequest_bodies_meta_subpage import ComponentsrequestBodiesMetaSubpage  # noqa: F401,E501
from photo_portfolio import util


class SubpageBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, value: Dict=None, meta: ComponentsrequestBodiesMetaSubpage=None):  # noqa: E501
        """SubpageBody - a model defined in Swagger

        :param value: The value of this SubpageBody.  # noqa: E501
        :type value: Dict
        :param meta: The meta of this SubpageBody.  # noqa: E501
        :type meta: ComponentsrequestBodiesMetaSubpage
        """
        self.swagger_types = {
            'value': Dict,
            'meta': ComponentsrequestBodiesMetaSubpage
        }

        self.attribute_map = {
            'value': 'value',
            'meta': 'meta'
        }
        self._value = value
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt) -> 'SubpageBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The subpage_body of this SubpageBody.  # noqa: E501
        :rtype: SubpageBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> Dict:
        """Gets the value of this SubpageBody.

        additional properties of subpage  # noqa: E501

        :return: The value of this SubpageBody.
        :rtype: Dict
        """
        return self._value

    @value.setter
    def value(self, value: Dict):
        """Sets the value of this SubpageBody.

        additional properties of subpage  # noqa: E501

        :param value: The value of this SubpageBody.
        :type value: Dict
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def meta(self) -> ComponentsrequestBodiesMetaSubpage:
        """Gets the meta of this SubpageBody.


        :return: The meta of this SubpageBody.
        :rtype: ComponentsrequestBodiesMetaSubpage
        """
        return self._meta

    @meta.setter
    def meta(self, meta: ComponentsrequestBodiesMetaSubpage):
        """Sets the meta of this SubpageBody.


        :param meta: The meta of this SubpageBody.
        :type meta: ComponentsrequestBodiesMetaSubpage
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta
