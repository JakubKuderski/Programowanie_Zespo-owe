# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MetaLayoutValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, author: str=None, font: str=None, nav_bar: str=None, background_color: str=None):  # noqa: E501
        """MetaLayoutValue - a model defined in Swagger

        :param author: The author of this MetaLayoutValue.  # noqa: E501
        :type author: str
        :param font: The font of this MetaLayoutValue.  # noqa: E501
        :type font: str
        :param nav_bar: The nav_bar of this MetaLayoutValue.  # noqa: E501
        :type nav_bar: str
        :param background_color: The background_color of this MetaLayoutValue.  # noqa: E501
        :type background_color: str
        """
        self.swagger_types = {
            'author': str,
            'font': str,
            'nav_bar': str,
            'background_color': str
        }

        self.attribute_map = {
            'author': 'author',
            'font': 'font',
            'nav_bar': 'nav_bar',
            'background_color': 'background_color'
        }
        self._author = author
        self._font = font
        self._nav_bar = nav_bar
        self._background_color = background_color

    @classmethod
    def from_dict(cls, dikt) -> 'MetaLayoutValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaLayout_value of this MetaLayoutValue.  # noqa: E501
        :rtype: MetaLayoutValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self) -> str:
        """Gets the author of this MetaLayoutValue.


        :return: The author of this MetaLayoutValue.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this MetaLayoutValue.


        :param author: The author of this MetaLayoutValue.
        :type author: str
        """

        self._author = author

    @property
    def font(self) -> str:
        """Gets the font of this MetaLayoutValue.


        :return: The font of this MetaLayoutValue.
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font: str):
        """Sets the font of this MetaLayoutValue.


        :param font: The font of this MetaLayoutValue.
        :type font: str
        """

        self._font = font

    @property
    def nav_bar(self) -> str:
        """Gets the nav_bar of this MetaLayoutValue.


        :return: The nav_bar of this MetaLayoutValue.
        :rtype: str
        """
        return self._nav_bar

    @nav_bar.setter
    def nav_bar(self, nav_bar: str):
        """Sets the nav_bar of this MetaLayoutValue.


        :param nav_bar: The nav_bar of this MetaLayoutValue.
        :type nav_bar: str
        """
        allowed_values = ["left", "top", "right"]  # noqa: E501
        if nav_bar not in allowed_values:
            raise ValueError(
                "Invalid value for `nav_bar` ({0}), must be one of {1}"
                .format(nav_bar, allowed_values)
            )

        self._nav_bar = nav_bar

    @property
    def background_color(self) -> str:
        """Gets the background_color of this MetaLayoutValue.


        :return: The background_color of this MetaLayoutValue.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color: str):
        """Sets the background_color of this MetaLayoutValue.


        :param background_color: The background_color of this MetaLayoutValue.
        :type background_color: str
        """

        self._background_color = background_color
